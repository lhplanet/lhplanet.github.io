import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,a as e}from"./app-9a860c23.js";const t={},p=e(`<h2 id="_1-1hbase-定义" tabindex="-1"><a class="header-anchor" href="#_1-1hbase-定义" aria-hidden="true">#</a> 1.1 HBase 定义</h2><p>Apache HBase™ 是以 hdfs 为数据存储的，一种分布式、可扩展的NoSQL 数据库。</p><h2 id="_1-2hbase-数据模型" tabindex="-1"><a class="header-anchor" href="#_1-2hbase-数据模型" aria-hidden="true">#</a> 1.2 HBase 数据模型</h2><p>HBase 的设计理念依据Google 的 BigTable 论文，论文中对于数据模型的首句介绍。</p><p>Bigtable 是一个稀疏的、分布式的、持久的多维排序 map。</p><p>之后对于映射的解释如下：</p><p>该映射由行键、列键和时间戳索引；映射中的每个值都是一个未解释的字节数组。</p><p>最终HBase 关于数据模型和 BigTable 的对应关系如下：</p><p>HBase 使用与 Bigtable 非常相似的数据模型。用户将数据行存储在带标签的表中。数<br> 据行具有可排序的键和任意数量的列。该表存储稀疏，因此如果用户喜欢，同一表中的行可<br> 以具有疯狂变化的列。</p><p>最终理解HBase 数据模型的关键在于稀疏、分布式、多维、排序的映射。其中映射 map指代非关系型数据库的key-Value 结构。</p><h3 id="_1-2-1hbase-逻辑结构" tabindex="-1"><a class="header-anchor" href="#_1-2-1hbase-逻辑结构" aria-hidden="true">#</a> 1.2.1 HBase 逻辑结构</h3><p>HBase 可以用于存储多种结构的数据，以 JSON 为例，存储的数据原貌为：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;row_key1&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token property">&quot;personal_info&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
			<span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;phone&quot;</span><span class="token operator">:</span><span class="token string">&quot;131********&quot;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token property">&quot;office_info&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
			<span class="token property">&quot;tel&quot;</span><span class="token operator">:</span><span class="token string">&quot;010-1111111&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;address&quot;</span><span class="token operator">:</span><span class="token string">&quot;atguigu&quot;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;row_key11&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token property">&quot;personal_info&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
			<span class="token property">&quot;city&quot;</span><span class="token operator">:</span><span class="token string">&quot;上海&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;phone&quot;</span><span class="token operator">:</span><span class="token string">&quot;132********&quot;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token property">&quot;office_info&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
			<span class="token property">&quot;tel&quot;</span><span class="token operator">:</span><span class="token string">&quot;010-1111111&quot;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;row_key2&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
	......
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/20231119212407.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-2hbase-物理存储结构" tabindex="-1"><a class="header-anchor" href="#_1-2-2hbase-物理存储结构" aria-hidden="true">#</a> 1.2.2 HBase 物理存储结构</h3><p>物理存储结构即为数据映射关系，而在概念视图的空单元格，底层实际根本不存储。</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/20231119212709.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-3数据模型" tabindex="-1"><a class="header-anchor" href="#_1-2-3数据模型" aria-hidden="true">#</a> 1.2.3 数据模型</h3><p>1）Name Space</p><p>命名空间，类似于关系型数据库的 database 概念，每个命名空间下有多个表。HBase 两个自带的命名空间，分别是 hbase 和 default，hbase 中存放的是 HBase 内置的表，default表是用户默认使用的命名空间。</p><p>2）Table</p><p>类似于关系型数据库的表概念。不同的是，HBase 定义表时只需要声明列族即可，不需要声明具体的列。因为数据存储时稀疏的，所有往 HBase 写入数据时，字段可以动态、按需指定。因此，和关系型数据库相比，HBase 能够轻松应对字段变更的场景。</p><p>3）Row</p><p>HBase 表中的每行数据都由一个RowKey 和多个Column（列）组成，数据是按照 RowKey 的字典顺序存储的，并且查询数据时只能根据 RowKey 进行检索，所以 RowKey 的设计十分重要。</p><p>4）Column</p><p>HBase 中的每个列都由 Column Family(列族)和 Column Qualifier（列限定符）进行限定，例如 info：name，info：age。建表时，只需指明列族，而列限定符无需预先定义。</p><p>5）Time Stamp</p><p>用于标识数据的不同版本（version），每条数据写入时，系统会自动为其加上该字段， 其值为写入 HBase 的时间。</p><p>6）Cell</p><p>由{rowkey, column Family：column Qualifier, timestamp} 唯一确定的单元。cell 中的数据全部是字节码形式存贮。</p><h2 id="_1-3hbase-基本架构" tabindex="-1"><a class="header-anchor" href="#_1-3hbase-基本架构" aria-hidden="true">#</a> 1.3 HBase 基本架构</h2><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/20231119213030.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="master" tabindex="-1"><a class="header-anchor" href="#master" aria-hidden="true">#</a> Master</h3><p>实现类为 HMaster，负责监控集群中所有的 RegionServer 实例。主要作用如下：</p><p>（1）管理元数据表格 hbase:meta，接收用户对表格创建修改删除的命令并执行</p><p>（2）监控 region 是否需要进行负载均衡，故障转移和 region 的拆分。通过启动多个后台线程监控实现上述功能：</p><p>①LoadBalancer 负载均衡器</p><p>周期性监控 region 分布在 regionServer 上面是否均衡，由参数 hbase.balancer.period 控制周期时间，默认 5 分钟。</p><p>②CatalogJanitor 元数据管理器</p><p>定期检查和清理 hbase:meta 中的数据。meta 表内容在进阶中介绍。</p><p>③MasterProcWAL master 预写日志处理器</p><p>把 master 需要执行的任务记录到预写日志 WAL 中，如果 master 宕机，让 backupMaster</p><p>读取日志继续干。</p><h3 id="region-server" tabindex="-1"><a class="header-anchor" href="#region-server" aria-hidden="true">#</a> Region Server</h3><p>Region Server 实现类为 HRegionServer，主要作用如下:</p><p>（1）负责数据 cell 的处理，例如写入数据 put，查询数据 get 等</p><p>（2）拆分合并 region 的实际执行者，有master 监控，有regionServer 执行。</p><h3 id="zookeeper" tabindex="-1"><a class="header-anchor" href="#zookeeper" aria-hidden="true">#</a> Zookeeper</h3><p>HBase 通过 Zookeeper 来做 master 的高可用、记录 RegionServer 的部署信息、并且存储有 meta 表的位置信息。</p><p>HBase 对于数据的读写操作时直接访问 Zookeeper 的，在 2.3 版本推出 Master Registry 模式，客户端可以直接访问 master。使用此功能，会加大对 master 的压力，减轻对 Zookeeper 的压力。</p><h3 id="hdfs" tabindex="-1"><a class="header-anchor" href="#hdfs" aria-hidden="true">#</a> HDFS</h3><p>HDFS 为Hbase 提供最终的底层数据存储服务，同时为HBase 提供高容错的支持。</p>`,52),o=[p];function i(r,l){return s(),n("div",null,o)}const d=a(t,[["render",i],["__file","01_HBase简介.html.vue"]]);export{d as default};
