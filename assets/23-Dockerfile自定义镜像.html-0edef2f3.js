import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c,a,b as n,e as i,d as e}from"./app-80c0fd9a.js";const p={},t=e('<p>常见的镜像在DockerHub就能找到，但是我们自己写的项目就必须自己构建镜像了。</p><p>而要自定义镜像，就必须先了解镜像的结构才行。</p><h2 id="一、镜像结构" tabindex="-1"><a class="header-anchor" href="#一、镜像结构" aria-hidden="true">#</a> 一、镜像结构</h2><p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p>我们以MySQL为例，来看看镜像的组成结构：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200142569.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>简单来说，镜像就是在系统函数库、运行环境基础上，添加应用程序文件、配置文件、依赖文件等组合，然后编写好启动脚本打包在一起形成的文件。</p><p>我们要构建镜像，其实就是实现上述打包的过程。</p><h2 id="二、dockerfile语法" tabindex="-1"><a class="header-anchor" href="#二、dockerfile语法" aria-hidden="true">#</a> 二、Dockerfile语法</h2><p>构建自定义的镜像时，并不需要一个个文件去拷贝，打包。</p><p>我们只需要告诉Docker，我们的镜像的组成，需要哪些BaseImage、需要拷贝什么文件、需要安装什么依赖、启动脚本是什么，将来Docker会帮助我们构建镜像。</p><p>而描述上述信息的文件就是Dockerfile文件。</p><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令(Instruction)</strong>，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200142025.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',14),d={href:"https://docs.docker.com/engine/reference/builder",target:"_blank",rel:"noopener noreferrer"},u=e(`<h2 id="三、构建java项目" tabindex="-1"><a class="header-anchor" href="#三、构建java项目" aria-hidden="true">#</a> 三、构建Java项目</h2><h3 id="_1-基于ubuntu构建java项目" tabindex="-1"><a class="header-anchor" href="#_1-基于ubuntu构建java项目" aria-hidden="true">#</a> 1.基于Ubuntu构建Java项目</h3><p>需求：基于Ubuntu镜像构建一个新镜像，运行一个java项目</p><ul><li>步骤1：新建一个空文件夹docker-demo</li></ul><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200143887.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>步骤2：拷贝课前资料中的docker-demo.jar文件到docker-demo这个目录</li></ul><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200143923.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>步骤3：拷贝课前资料中的jdk8.tar.gz文件到docker-demo这个目录</li></ul><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200144741.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>步骤4：拷贝课前资料提供的Dockerfile到docker-demo这个目录</li></ul><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200144247.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中的内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 指定基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:16.04</span>
<span class="token comment"># 配置环境变量，JDK的安装目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_DIR=/usr/local</span>

<span class="token comment"># 拷贝jdk和java项目的包</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./docker-demo.jar /tmp/app.jar</span>

<span class="token comment"># 安装JDK</span>
<span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$JAVA_DIR</span> <span class="token operator">\\</span>
 &amp;&amp; tar -xf ./jdk8.tar.gz <span class="token operator">\\</span>
 &amp;&amp; mv ./jdk1.8.0_144 ./java8</span>

<span class="token comment"># 配置环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=<span class="token variable">$JAVA_DIR</span>/java8</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin</span>

<span class="token comment"># 暴露端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token comment"># 入口，java项目的启动命令</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>步骤5：进入docker-demo</p><p>将准备好的docker-demo上传到虚拟机任意目录，然后进入docker-demo目录下</p></li><li><p>步骤6：运行命令：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> javaweb:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,15),k={href:"http://192.168.150.101:8090/hello/count%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%9A%84ip%E6%94%B9%E6%88%90%E4%BD%A0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BAip",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="_2-基于java8构建java项目" tabindex="-1"><a class="header-anchor" href="#_2-基于java8构建java项目" aria-hidden="true">#</a> 2.基于java8构建Java项目</h3><p>虽然我们可以基于Ubuntu基础镜像，添加任意自己需要的安装包，构建镜像，但是却比较麻烦。所以大多数情况下，我们都可以在一些安装了部分软件的基础镜像上做改造。</p><p>例如，构建java项目的镜像，可以在已经准备了JDK的基础镜像基础上构建。</p><p>需求：基于java:8-alpine镜像，将一个Java项目构建为镜像</p><p>实现思路如下：</p><p>（1）新建一个空的目录，然后在目录中新建一个文件，命名为Dockerfile</p><p>（2）拷贝课前资料提供的docker-demo.jar到这个目录中</p><p>（3）编写Dockerfile文件：</p><pre><code>• 基于java:8-alpine作为基础镜像
• 将app.jar拷贝到镜像中
• 暴露端口
• 编写入口ENTRYPOINT
</code></pre><p>内容如下：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> java:8-alpine</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./app.jar /tmp/app.jar</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（4）使用docker build命令构建镜像</p><p>（5）使用docker run创建容器并运行</p><h2 id="四、小结" tabindex="-1"><a class="header-anchor" href="#四、小结" aria-hidden="true">#</a> 四、小结</h2><ol><li>Dockerfile的本质是一个文件，通过指令描述镜像的构建过程</li><li>Dockerfile的第一行必须是FROM，从一个基础镜像来构建</li><li>基础镜像可以是基本操作系统，如Ubuntu。也可以是其他人制作好的镜像，例如：java:8-alpine</li></ol>`,15);function v(b,g){const s=o("ExternalLinkIcon");return r(),c("div",null,[t,a("p",null,[n("更新详细语法说明，请参考官网文档： "),a("a",d,[n("https://docs.docker.com/engine/reference/builder"),i(s)])]),u,a("p",null,[n("最后访问 "),a("a",k,[n("http://192.168.150.101:8090/hello/count，其中的ip改成你的虚拟机ip"),i(s)])]),m])}const j=l(p,[["render",v],["__file","23-Dockerfile自定义镜像.html.vue"]]);export{j as default};
