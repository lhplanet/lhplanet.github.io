import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as i,c as d,a as e,b as r,e as n,d as o}from"./app-6f631a46.js";const p={},h=o('<h2 id="docker简介" tabindex="-1"><a class="header-anchor" href="#docker简介" aria-hidden="true">#</a> Docker简介</h2><p>Docker是基于Go语言实现的云开源项目。</p><p>Docker的主要目标是：<code>Build, Ship and Run Any App, Anywhere</code>，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP及其运行环境能做到<strong>一次镜像,处处运行</strong>。</p><h2 id="传统虚拟机和容器" tabindex="-1"><a class="header-anchor" href="#传统虚拟机和容器" aria-hidden="true">#</a> 传统虚拟机和容器</h2><p>传统虚拟机（virtual machine）：</p><p>传统虚拟机技术基于安装在主操作系统上的虚拟机管理系统（如VirtualBox、VMware等），创建虚拟机（虚拟出各种硬件），在虚拟机上安装从操作系统，在从操作系统中安装部署各种应用。</p><p>缺点：资源占用多、冗余步骤多、启动慢</p><p>Linux容器（Linux Container，简称LXC）：</p><p>Linux容器是与系统其他部分分隔开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。</p><p>Linux容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一的运行。</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/12911942/1652093324480-073374a2-4ce3-4a56-932b-5a73329736a2.jpeg?x-oss-process=image%2Fresize%2Cw_1125%2Climit_0%2Finterlace%2C1" alt="virtual-machine-vs-docker-container.jpg" tabindex="0" loading="lazy"><figcaption>virtual-machine-vs-docker-container.jpg</figcaption></figure><p>对比：</p><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>大小</td><td>一般为Mb</td><td>一般为Gb</td></tr><tr><td>速度</td><td>接近原生</td><td>比较慢</td></tr><tr><td>系统支持数量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><h2 id="docker运行速度快的原因" tabindex="-1"><a class="header-anchor" href="#docker运行速度快的原因" aria-hidden="true">#</a> Docker运行速度快的原因</h2><p>Docker有比虚拟机更少的抽象层：</p><p>由于Docker不需要Hypervisor（虚拟机）实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的都是实际物理机的硬件资源，因此在CPU、内存利用率上docker有明显优势。</p><p>Docker利用的是宿主机的内核，而不需要加载操作系统OS内核：</p><p>当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较耗时耗资源的过程。当新建一个虚拟机时，虚拟机软件需要加载OS，返回新建过程是分钟级别的。而Docker由于直接利用宿主机的操作系统，则省略了返回过程，因此新建一个docker容器只需要几秒钟。</p><p>Docker容器的本质就是一个进程。</p><h2 id="docker软件" tabindex="-1"><a class="header-anchor" href="#docker软件" aria-hidden="true">#</a> Docker软件</h2><p>Docker并非一个通用的容器工具，它依赖于已经存在并运行的Linux内核环境。（在Windows上安装Docker时需要依赖WLS，也即Windows下的Linux子系统）。</p><p>Docker实质上是在已经运行的Linux下制造了一个隔离的文件环境，因此它执行的效率几乎等同于所部署的Linux主机。</p><p>Docker的基本组成部分：</p><ul><li><p>镜像（image）</p></li><li><p>容器（container）</p></li><li><p>仓库（repository）</p></li></ul><h2 id="docker镜像" tabindex="-1"><a class="header-anchor" href="#docker镜像" aria-hidden="true">#</a> Docker镜像</h2><p>Docker镜像就是一个只读的模板。镜像可以用来创建Docker容器，一个镜像可以创建多个容器。</p><h1 id="docker容器" tabindex="-1"><a class="header-anchor" href="#docker容器" aria-hidden="true">#</a> Docker容器</h1><p>Docker利用容器独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器是用镜像创建的运行实例。</p><h1 id="docker仓库" tabindex="-1"><a class="header-anchor" href="#docker仓库" aria-hidden="true">#</a> Docker仓库</h1><p>Docker仓库是集中存放镜像文件的场所。</p><p>仓库分为公开仓库和私有仓库两种。</p>',31),l={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},k=o('<h2 id="docker架构" tabindex="-1"><a class="header-anchor" href="#docker架构" aria-hidden="true">#</a> Docker架构</h2><p>Docker是一个 C/S（Client-Server） 结构的系统，后端是一个松耦合架构，众多模块各司其职。</p><p>Docker守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从容器接收命令并管理运行在主机上的容器。</p><figure><img src="https://cdn.nlark.com/yuque/0/2022/svg/12911942/1652093339897-20255a0a-e981-43e3-9e9e-654b8da3b2c8.svg" alt="architecture.svg" tabindex="0" loading="lazy"><figcaption>architecture.svg</figcaption></figure><p>Docker运行的基本流程为：</p><ol><li><p>用户是使用Docker Client 与 Docker Daemon 建立通信，并发送请求给后者</p></li><li><p>Docker Daemon 作为 Docker 架构的主体部分，首先提供 Docker Server 的功能使其可以接收 Docker Client 的请求</p></li><li><p>Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式存在</p></li><li><p>Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph Driver 将下载镜像以 Graph 的形式存储</p></li><li><p>当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境</p></li><li><p>当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Exec driver 来完成</p></li><li><p>Libcontainer 是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过 Libcontainer 来实现具体对容器进行的操作</p></li></ol><figure><img src="https://cdn.nlark.com/yuque/0/2022/png/12911942/1652093347909-4fcf65d1-da12-47cb-9a2f-0c4528d7e4c9.png?x-oss-process=image%2Fresize%2Cw_1125%2Climit_0" alt="flow.png" tabindex="0" loading="lazy"><figcaption>flow.png</figcaption></figure>',7);function s(u,D){const a=t("ExternalLinkIcon");return i(),d("div",null,[h,e("p",null,[r("最大的公开仓库是Docker官方的Docker Hub："),e("a",l,[r("https://hub.docker.com/"),n(a)])]),k])}const b=c(p,[["render",s],["__file","01-Docker概述.html.vue"]]);export{b as default};
