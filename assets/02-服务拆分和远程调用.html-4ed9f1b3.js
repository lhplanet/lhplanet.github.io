import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as t,c as o,a as n,b as a,d as c,e as s}from"./app-15ae1d0f.js";const l={},r=s('<p>任何分布式架构都离不开服务的拆分，微服务也是一样。</p><h2 id="一、服务拆分原则" tabindex="-1"><a class="header-anchor" href="#一、服务拆分原则" aria-hidden="true">#</a> 一、服务拆分原则</h2><p>这里我总结了微服务拆分时的几个原则：</p><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192310901.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、服务拆分示例" tabindex="-1"><a class="header-anchor" href="#二、服务拆分示例" aria-hidden="true">#</a> 二、服务拆分示例</h2><p>以资料中的微服务cloud-demo为例，其结构如下：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192311766.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>cloud-demo：父工程，管理依赖</p><ul><li>order-service：订单微服务，负责订单相关业务</li><li>user-service：用户微服务，负责用户相关业务</li></ul><p>要求：</p><ul><li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li><li>订单服务和用户服务都对外暴露Restful的接口</li><li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li></ul><h3 id="_1-导入sql语句" tabindex="-1"><a class="header-anchor" href="#_1-导入sql语句" aria-hidden="true">#</a> 1.导入Sql语句</h3><p>首先，将资料提供的<code>cloud-order.sql</code>和<code>cloud-user.sql</code>导入到mysql中：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192311318.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>cloud-user表中初始数据如下：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192311056.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>cloud-order表中初始数据如下：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192311639.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>cloud-order表中持有cloud-user表中的id字段。</p><h3 id="_2-导入demo工程" tabindex="-1"><a class="header-anchor" href="#_2-导入demo工程" aria-hidden="true">#</a> 2.导入demo工程</h3><p>用IDEA导入资料提供的Demo：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192312962.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>项目结构如下：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192313570.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>导入后，会在IDEA右下角出现弹窗：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192317727.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击弹窗，然后按下图选择：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192317066.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>会出现这样的菜单：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192318591.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>配置下项目使用的JDK：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192318556.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、实现远程调用案例" tabindex="-1"><a class="header-anchor" href="#三、实现远程调用案例" aria-hidden="true">#</a> 三、实现远程调用案例</h2><p>在order-service服务中，有一个根据id查询订单的接口：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192319721.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>根据id查询订单，返回值是Order对象，如图：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192319537.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其中的user为null。</p><p>在user-service中有一个根据id查询用户的接口：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192320360.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查询的结果如图：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192320761.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-案例需求" tabindex="-1"><a class="header-anchor" href="#_1-案例需求" aria-hidden="true">#</a> 1.案例需求：</h3><p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回。</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192320410.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',46),u={href:"http://localhost:8081/user/%7BuserId%7D%E8%BF%99%E4%B8%AA%E6%8E%A5%E5%8F%A3%E3%80%82",target:"_blank",rel:"noopener noreferrer"},d=s(`<p>大概的步骤是这样的：</p><ul><li>注册一个RestTemplate的实例到Spring容器</li><li>修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li><li>将查询的User填充到Order对象，一起返回</li></ul><h3 id="_2-注册resttemplate" tabindex="-1"><a class="header-anchor" href="#_2-注册resttemplate" aria-hidden="true">#</a> 2.注册RestTemplate</h3><p>首先，我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>itcast<span class="token punctuation">.</span>order</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">RestTemplate</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">&quot;cn.itcast.order.mapper&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">OrderApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-实现远程调用" tabindex="-1"><a class="header-anchor" href="#_3-实现远程调用" aria-hidden="true">#</a> 3.实现远程调用</h3><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192320175.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="四、提供者与消费者" tabindex="-1"><a class="header-anchor" href="#四、提供者与消费者" aria-hidden="true">#</a> 四、提供者与消费者</h2><p>在服务调用关系中，会有两个不同的角色：</p><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308192321438.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p><p>如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？</p><ul><li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li><li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li></ul><p>因此，服务B既可以是服务提供者，也可以是服务消费者。</p>`,17);function g(m,k){const i=p("ExternalLinkIcon");return t(),o("div",null,[r,n("p",null,[a("因此，我们需要在order-service中 向user-service发起一个http的请求，调用 "),n("a",u,[a("http://localhost:8081/user/{userId}这个接口。"),c(i)])]),d])}const b=e(l,[["render",g],["__file","02-服务拆分和远程调用.html.vue"]]);export{b as default};
