import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o,c as r,b as e,d as a,e as t,a as i}from"./app-9a860c23.js";const c={},d=e("p",null,"上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？",-1),p=e("h2",{id:"一、负载均衡原理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、负载均衡原理","aria-hidden":"true"},"#"),a(" 一、负载均衡原理")],-1),u=e("p",null,"SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。",-1),h=e("figure",null,[e("img",{src:"https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200004280.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1),g={href:"http://userservice/user/1%EF%BC%8C%E6%80%8E%E4%B9%88%E5%8F%98%E6%88%90%E4%BA%86http://localhost:8081%E7%9A%84%E5%91%A2%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"},b=i('<h2 id="二、源码跟踪" tabindex="-1"><a class="header-anchor" href="#二、源码跟踪" aria-hidden="true">#</a> 二、源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><h3 id="_1-loadbalancerintercepor" tabindex="-1"><a class="header-anchor" href="#_1-loadbalancerintercepor" aria-hidden="true">#</a> 1.LoadBalancerIntercepor</h3><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200005433.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p>',7),m=e("code",null,"request.getURI()",-1),_={href:"http://user-service/user/8",target:"_blank",rel:"noopener noreferrer"},f=e("li",null,[e("code",null,"originalUri.getHost()"),a("：获取uri路径的主机名，其实就是服务id，"),e("code",null,"user-service")],-1),v=e("li",null,[e("code",null,"this.loadBalancer.execute()"),a("：处理服务id，和用户请求。")],-1),k=i('<p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><h3 id="_2-loadbalancerclient" tabindex="-1"><a class="header-anchor" href="#_2-loadbalancerclient" aria-hidden="true">#</a> 2.LoadBalancerClient</h3><p>继续跟入execute方法：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200005871.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200005878.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>果然实现了负载均衡。</p><h3 id="_3-负载均衡策略irule" tabindex="-1"><a class="header-anchor" href="#_3-负载均衡策略irule" aria-hidden="true">#</a> 3.负载均衡策略IRule</h3><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200005878.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们继续跟入：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200005145.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200005991.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们看看这个rule是谁：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200005842.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200006285.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><h3 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4.总结</h3><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200006473.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>基本流程如下：</p>',26),y={href:"http://userservice/user/1",target:"_blank",rel:"noopener noreferrer"},R=e("li",null,"RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service",-1),x=e("li",null,"DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表",-1),B=e("li",null,"eureka返回列表，localhost:8081、localhost:8082",-1),E=e("li",null,"IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081",-1),C={href:"http://localhost:8081/user/1%EF%BC%8C%E5%8F%91%E8%B5%B7%E7%9C%9F%E5%AE%9E%E8%AF%B7%E6%B1%82",target:"_blank",rel:"noopener noreferrer"},L=i(`<h2 id="三、负载均衡策略" tabindex="-1"><a class="header-anchor" href="#三、负载均衡策略" aria-hidden="true">#</a> 三、负载均衡策略</h2><h3 id="_1-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_1-负载均衡策略" aria-hidden="true">#</a> 1.负载均衡策略</h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><figure><img src="https://lhplanet-1316168555.cos.ap-beijing.myqcloud.com/obsidian/202308200007712.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略： （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<code>&lt;clientName&gt;.&lt;clientConfigNameSpace&gt;.ActiveConnectionsLimit</code>属性进行配置。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><h3 id="_2-自定义负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_2-自定义负载均衡策略" aria-hidden="true">#</a> 2.自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><p>（1）代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">randomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span> <span class="token comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule <span class="token comment"># 负载均衡规则 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>一般用默认的负载均衡规则，不做修改。</p></div><h2 id="四、饥饿加载" tabindex="-1"><a class="header-anchor" href="#四、饥饿加载" aria-hidden="true">#</a> 四、饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">clients</span><span class="token punctuation">:</span> userservice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18);function I(j,q){const n=l("ExternalLinkIcon");return o(),r("div",null,[d,p,u,h,e("p",null,[a("那么我们发出的请求明明是"),e("a",g,[a("http://userservice/user/1，怎么变成了http://localhost:8081的呢？"),t(n)])]),b,e("ul",null,[e("li",null,[m,a("：获取请求uri，本例中就是 "),e("a",_,[a("http://user-service/user/8"),t(n)])]),f,v]),k,e("ul",null,[e("li",null,[a("拦截我们的RestTemplate请求"),e("a",y,[a("http://userservice/user/1"),t(n)])]),R,x,B,E,e("li",null,[a("RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到"),e("a",C,[a("http://localhost:8081/user/1，发起真实请求"),t(n)])])]),L])}const F=s(c,[["render",I],["__file","04_Ribbon负载均衡.html.vue"]]);export{F as default};
